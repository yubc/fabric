


version: '2'
networks:
  byfn:
services:

  zookeeper0.example.com:
    container_name: zookeeper0.example.com
    hostname: zookeeper0.example.com
    extends:
      file: base.yaml
      service: zookeeper
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=zookeeper0.example.com:2888:3888 server.2=zookeeper1.example.com:12888:13888 server.3=zookeeper2.example.com:22888:23888
    # volumes:
    #   - ./data/zookeeper1/data:/data
    #   - ./data/zookeeper1/datalog:/datalog
    networks:
      - byfn
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
  zookeeper1.example.com:
    container_name: zookeeper1.example.com
    hostname: zookeeper1.example.com
    extends:
      file: base.yaml
      service: zookeeper
    environment:
      - ZOO_MY_ID=2
      - ZOO_SERVERS=server.1=zookeeper0.example.com:2888:3888 server.2=zookeeper1.example.com:12888:13888 server.3=zookeeper2.example.com:22888:23888
    # volumes:
    #   - ./data/zookeeper1/data:/data
    #   - ./data/zookeeper1/datalog:/datalog
    networks:
      - byfn
    ports:
      - 12181:2181
      - 12888:2888
      - 13888:3888

  zookeeper2.example.com:
    container_name: zookeeper2.example.com
    hostname: zookeeper2.example.com
    extends:
      file: base.yaml
      service: zookeeper
    environment:
      - ZOO_MY_ID=3
      - ZOO_SERVERS=server.1=zookeeper0.example.com:2888:3888 server.2=zookeeper1.example.com:12888:13888 server.3=zookeeper2.example.com:22888:23888
    # volumes:
    #   - ./data/zookeeper1/data:/data
    #   - ./data/zookeeper1/datalog:/datalog
    networks:
      - byfn
    ports:
      - 22181:2181
      - 22888:2888
      - 23888:3888

  kafka0.example.com:
    container_name: kafka0.example.com
    hostname: kafka0.example.com
    extends:
      file: base.yaml
      service: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.example.com:2181,zookeeper1.example.com:12181,zookeeper2.example.com:22181
    ports:
      - 9092:9092
    #volumes:
    # 存储数据与日志.
    #- ./data/kafka0/data:/data
    #- ./data/kafka0/data:/logs
    networks:
      - byfn
    depends_on:
      - zookeeper0.example.com
      - zookeeper1.example.com
      - zookeeper2.example.com
  kafka1.example.com:
    container_name: kafka1.example.com
    hostname: kafka1.example.com
    extends:
      file: base.yaml
      service: kafka
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.example.com:2181,zookeeper1.example.com:12181,zookeeper2.example.com:22181
    ports:
      - 10092:9092
    #volumes:
    # 存储数据与日志.
    #- ./data/kafka1/data:/data
    #- ./data/kafka1/data:/logs
    networks:
      - byfn
    depends_on:
      - zookeeper0.example.com
      - zookeeper1.example.com
      - zookeeper2.example.com

  kafka2.example.com:
    container_name: kafka2.example.com
    hostname: kafka2.example.com
    extends:
      file: base.yaml
      service: kafka
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.example.com:2181,zookeeper1.example.com:12181,zookeeper2.example.com:22181

    ports:
      - 11092:9092
    #volumes:
    # 存储数据与日志.
    #- ./data/kafka1/data:/data
    #- ./data/kafka1/data:/logs
    networks:
      - byfn
    depends_on:
      - zookeeper0.example.com
      - zookeeper1.example.com
      - zookeeper2.example.com
  
  kafka3.example.com:
    container_name: kafka3.example.com
    hostname: kafka3.example.com
    extends:
      file: base.yaml
      service: kafka
    environment:
      - KAFKA_BROKER_ID=4
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.example.com:2181,zookeeper1.example.com:12181,zookeeper2.example.com:22181

    ports:
      - 12092:9092
    #volumes:
    # 存储数据与日志.
    #- ./data/kafka1/data:/data
    #- ./data/kafka1/data:/logs
    networks:
      - byfn
    depends_on:
      - zookeeper0.example.com
      - zookeeper1.example.com
      - zookeeper2.example.com

  orderer0.example.com:
    container_name: orderer0.example.com
    extends:
      file: base.yaml
      service:  orderer
    environment:
      # kafka
      - ORDERER_KAFKA_RETRY_LONGINTERVAL=10s
      - ORDERER_KAFKA_RETRY_LONGTOTAL=100s
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_KAFKA_BROKERS=[kafka0.example.com:9092,kafka1.example.com:10092,kafka2.example.com:11092,kafka3.example.com:12092]
    volumes:
      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls
    ports:
      - 7050:7050
    networks:
      - byfn
    depends_on:
      - zookeeper0.example.com
      - zookeeper1.example.com
      - zookeeper2.example.com
      - kafka0.example.com
      - kafka1.example.com
      - kafka2.example.com
      - kafka3.example.com

  orderer1.example.com:
    container_name: orderer1.example.com
    extends:
      file: base.yaml
      service:  orderer
    environment:
      # kafka
      - ORDERER_KAFKA_RETRY_LONGINTERVAL=10s
      - ORDERER_KAFKA_RETRY_LONGTOTAL=100s
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_KAFKA_BROKERS=[kafka0.example.com:9092,kafka1.example.com:10092,kafka2.example.com:11092,kafka3.example.com:12092]
    volumes:
      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/:/var/hyperledger/orderer/tls
    ports:
      - 8050:7050
    networks:
      - byfn
    depends_on:
      - zookeeper0.example.com
      - zookeeper1.example.com
      - zookeeper2.example.com
      - kafka0.example.com
      - kafka1.example.com
      - kafka2.example.com
      - kafka3.example.com
  
  orderer2.example.com:
    container_name: orderer2.example.com
    extends:
      file: base.yaml
      service:  orderer
    environment:
      # kafka
      - ORDERER_KAFKA_RETRY_LONGINTERVAL=10s
      - ORDERER_KAFKA_RETRY_LONGTOTAL=100s
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_KAFKA_BROKERS=[kafka0.example.com:9092,kafka1.example.com:10092,kafka2.example.com:11092,kafka3.example.com:12092]
    volumes:
      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/var/hyperledger/orderer/tls
    ports:
      - 9050:7050
    networks:
      - byfn
    depends_on:
      - zookeeper0.example.com
      - zookeeper1.example.com
      - zookeeper2.example.com
      - kafka0.example.com
      - kafka1.example.com
      - kafka2.example.com
      - kafka3.example.com

  # ca.org1.example.com:
  #   container_name: ca.org1.example.com
  #   extends:
  #     file: base.yaml
  #     service:  ca
  #   environment:
  #     - FABRIC_CA_SERVER_CA_NAME=ca-org1
  #     - FABRIC_CA_SERVER_TLS_ENABLED=false
  #     - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
  #     - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/89548278441a1f0680a12ce8935c0e1c1710f8707b89b61e732efe9eda6ee3cd_sk
  #   volumes:
  #     - ./crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
  #   ports:
  #     - 7054:7054
  #   command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/89548278441a1f0680a12ce8935c0e1c1710f8707b89b61e732efe9eda6ee3cd_sk -b admin:adminpw -d'
  #   depends_on:
  #     - orderer0.example.com
  #     - orderer1.example.com
  #     - orderer2.example.com
  
  # ca.org2.example.com:
  #   container_name: ca.org2.example.com
  #   extends:
  #     file: base.yaml
  #     service:  ca
  #   environment:
  #     - FABRIC_CA_SERVER_CA_NAME=ca-org2
  #     - FABRIC_CA_SERVER_TLS_ENABLED=false
  #     - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
  #     - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/8356c941dfc1623f4d6bc4b74dfa331bca7a8a9583680307ffdcec4f2c6b7133_sk
  #   volumes:
  #     - ./crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
  #   ports:
  #     - 8054:7054
  #   command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/8356c941dfc1623f4d6bc4b74dfa331bca7a8a9583680307ffdcec4f2c6b7133_sk -b admin:adminpw -d'
  #   depends_on:
  #     - orderer0.example.com
  #     - orderer1.example.com
  #     - orderer2.example.com

  # couchdb0:
  #   container_name: couchdb0
  #   extends:
  #     file: base.yaml
  #     service: couchdb 
  #   ports:
  #     - "5984:5984"
  #   volumes:
  #     # 数据持久化，用于存储链码值
  #     - ./data/couchdb0/data:/opt/couchdb/data

  # couchdb1:
  #   container_name: couchdb1
  #   extends:
  #     file: base.yaml
  #     service: couchdb 
  #   ports:
  #     - "6984:5984"
  #   volumes:
  #     # 数据持久化，用于存储链码值
  #     - ./data/couchdb1/data:/opt/couchdb/data

  # couchdb2:
  #   container_name: couchdb2
  #   extends:
  #     file: base.yaml
  #     service: couchdb 
  #   ports:
  #     - "7984:5984"
  #   volumes:
  #     # 数据持久化，用于存储链码值
  #     - ./data/couchdb2/data:/opt/couchdb/data

  # couchdb3:
  #   container_name: couchdb3
  #   extends:
  #     file: base.yaml
  #     service: couchdb 
  #   ports:
  #     - "8984:5984"
  #   volumes:
  #     # 数据持久化，用于存储链码值
  #     - ./data/couchdb3/data:/opt/couchdb/data

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    extends:
      file: base.yaml
      service: peer
    environment:
      # - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=

      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_NETWORKID=${NETWORKMODE}
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP

    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
        # 数据持久化, 存储安装，以及实例化智能合约的数据
        # - ./data/peer0org1:/var/hyperledger/production
    ports:
      - 7051:7051
      - 7052:7052
      - 7053:7053
    networks:
      - byfn
    depends_on:
      # - couchdb0
      # - ca.org1.example.com
      # - ca.org2.example.com
      - orderer0.example.com
      - orderer1.example.com
      - orderer2.example.com

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    extends:
      file: base.yaml
      service: peer
    environment:
      # - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1:6984
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=

      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_NETWORKID=${NETWORKMODE}
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org2.example.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP

    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ./crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls
        # 数据持久化, 存储安装，以及实例化智能合约的数据
        # - ./data/peer0org2:/var/hyperledger/production
    ports:
      - 8051:7051
      - 8052:7052
      - 8053:7053
    networks:
      - byfn
    depends_on:
      # - couchdb1
      # - ca.org1.example.com
      # - ca.org2.example.com
      - orderer0.example.com
      - orderer1.example.com
      - orderer2.example.com

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    extends:
      file: base.yaml
      service: peer
    environment:
      # - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb2:7984
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=

      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_NETWORKID=${NETWORKMODE}
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP

    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls
        # 数据持久化, 存储安装，以及实例化智能合约的数据
        # - ./data/peer1org1:/var/hyperledger/production
    ports:
      - 9051:7051
      - 9052:7052
      - 9053:7053
    networks:
      - byfn
    # depends_on:
    #   # - couchdb2
    #   # - ca.org1.example.com
    #   # - ca.org2.example.com
    #   - orderer0.example.com
    #   - orderer1.example.com
    #   - orderer2.example.com

    
  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    extends:
      file: base.yaml
      service: peer
    environment:
      # - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb2:8984
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=

      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_NETWORKID=${NETWORKMODE}
      - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org2.example.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP

    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ./crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls
        # 数据持久化, 存储安装，以及实例化智能合约的数据
        # - ./data/peer1org2:/var/hyperledger/production
    ports:
      - 10051:7051
      - 10052:7052
      - 10053:7053
    networks:
      - byfn
    # depends_on:
    #   # - couchdb3
    #   # - ca.org1.example.com
    #   # - ca.org2.example.com
    #   - orderer0.example.com
    #   - orderer1.example.com
    #   - orderer2.example.com

  cli:
    container_name: cli
    extends:
      file: base.yaml
      service: client
    environment:
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    volumes:
        - ./chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/example/chaincode/go
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/

    networks:
      - byfn

    depends_on:
      - orderer0.example.com
      - orderer1.example.com
      - orderer2.example.com
      - peer0.org1.example.com
      - peer0.org2.example.com
      - peer1.org1.example.com
      - peer1.org2.example.com
    